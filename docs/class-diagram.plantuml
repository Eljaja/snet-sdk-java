@startuml

title SingularityNet Java SDK

package io.singularitynet.sdk.payment {

    interface Payment {
        void toMetadata(Metadata headers);
    }

    class PaymentSerializer {
        static final Metadata.Key<String> SNET_PAYMENT_TYPE;
        static final Metadata.Key<byte[]> SNET_PAYMENT_SIGNATURE;
        static final Metadata.AsciiMarshaller<BigInteger> ASCII_BIGINTEGER_MARSHALLER;

        static void register(String type, Function<Metadata, Payment> reader);
        static Optional<Payment> fromMetadata(Metadata headers);
        static void toMetadata(Payment payment, Metadata headers);
    }

    PaymentSerializer -- Payment

}

package io.singularitynet.sdk.ethereum {

    interface WithAddress {
        Address getAddress();
    }

    interface Identity {
        Signature sign(byte[] message);
    }
    WithAddress <|-- Identity

    class PrivateKeyIdentity {
        Credentials getCredentials();
    }
    Identity <|.. PrivateKeyIdentity

    class MnemonicIdentity
    PrivateKeyIdentity <|-- MnemonicIdentity

    class Ethereum {
        BigInteger getEthBlockNumber();
    }

}

package io.singularitynet.sdk.registry {

    interface MetadataStorage {
        byte[] get(URI uri);
    }
    class IpfsMetadataStorage
    MetadataStorage <|.. IpfsMetadataStorage

    class RegistryContract {
        Optional<OrganizationRegistration> getOrganizationById(String orgId);
        Optional<ServiceRegistration> getServiceRegistrationById(String orgId, String serviceId);
    }

    interface MetadataProvider {
        ServiceMetadata getServiceMetadata();
        OrganizationMetadata getOrganizationMetadata();
    }

    class RegistryMetadataProvider
    MetadataProvider <|.. RegistryMetadataProvider
    RegistryMetadataProvider *-- RegistryContract
    RegistryMetadataProvider *-- MetadataStorage

    class CachingMetadataProvider
    MetadataProvider <|.. CachingMetadataProvider
    CachingMetadataProvider *-- RegistryMetadataProvider

}

package io.singularitynet.sdk.mpe {

    class MultiPartyEscrowContract {
        Optional<PaymentChannel> getChannelById(BigInteger channelId);
        Address getContractAddress();
        PaymentChannel openChannel(Address signer, Address recipient,\n\tPaymentGroupId groupId, BigInteger value, BigInteger expiration);
        void transfer(Address receiver, BigInteger value);
        Stream<PaymentChannel> getChannelOpenEvents();
        BigInteger channelAddFunds(BigInteger channelId, BigInteger amount);
        BigInteger channelExtend(BigInteger channelId, BigInteger expiration);
        ExtendAndAddFundsResponse channelExtendAndAddFunds(BigInteger channelId,\n\tBigInteger expiration, BigInteger amount);
    }

    interface PaymentChannelStateProvider {
        PaymentChannel getChannelStateById(BigInteger channelId);
    }

    class EscrowPayment
    Payment ()- EscrowPayment

    interface BlockchainPaymentChannelManager {
        Stream<PaymentChannel> getChannelsAccessibleBy(PaymentGroupId paymentGroupId, WithAddress identity);
        PaymentChannel openPaymentChannel(PaymentGroup paymentGroup,\n\tWithAddress signer, BigInteger value, BigInteger expiration);
        PaymentChannel addFundsToChannel(PaymentChannel channel, BigInteger amount);
        PaymentChannel extendChannel(PaymentChannel channel, BigInteger expiration);
        PaymentChannel extendAndAddFundsToChannel(PaymentChannel channel,\n\tBigInteger expiration, BigInteger amount);
    }

    class MpePaymentChannelManager
    BlockchainPaymentChannelManager <|.. MpePaymentChannelManager
    MpePaymentChannelManager o-- MultiPartyEscrowContract

}

package io.singularitynet.sdk.freecall {

    class FreeCallPayment
    Payment ()- FreeCallPayment 

}

package io.singularitynet.sdk.daemon {
    
    interface DaemonConnection {
        <T> T getGrpcStub(Function<Channel, T> constructor);
        void setClientCallsInterceptor(ClientInterceptor interceptor);
        String getEndpointGroupName();
        void shutdownNow();
    }

    class RandomEndpointDaemonConnection
    DaemonConnection <|.. RandomEndpointDaemonConnection
    RandomEndpointDaemonConnection o-- MetadataProvider

    class PaymentChannelStateService {
        PaymentChannelStateReply getChannelState(BigInteger channelId);
    }
    PaymentChannelStateService o-- Identity
    PaymentChannelStateService o-- Ethereum
    PaymentChannelStateService -- DaemonConnection

    class AskDaemonFirstPaymentChannelProvider
    PaymentChannelStateProvider ()- AskDaemonFirstPaymentChannelProvider
    AskDaemonFirstPaymentChannelProvider o-- MultiPartyEscrowContract
    AskDaemonFirstPaymentChannelProvider *-- PaymentChannelStateService

    class FreeCallStateService {
        long getFreeCallsAvailable(String dappUserId, String freeCallToken,
                BigInteger tokenExpirationBlock, Identity signer);
    }
    FreeCallStateService o-- Ethereum
    FreeCallStateService o-- MetadataProvider
    FreeCallStateService o-- DaemonConnection

}


package io.singularitynet.sdk.client {

    interface Configuration {
        URL getEthereumJsonRpcEndpoint();
        URL getIpfsEndpoint();
        IdentityType getIdentityType();
        Optional<String> getIdentityMnemonic();
        Optional<byte[]> getIdentityPrivateKey();
        Optional<Address> getRegistryAddress();
        Optional<Address> getMultiPartyEscrowAddress();
    }

    class ConfigurationUtils {
        static Configuration fromProperties(Properties props);
        static Configuration fromJson(String json);
    }
    
    ConfigurationUtils -- Configuration

    class StaticConfiguration
    Configuration <|.. StaticConfiguration

    interface DependencyFactory {
        Web3j getWeb3j();
        IPFS getIpfs();
        Identity getIdentity();
        Registry getRegistry();
        MultiPartyEscrow getMultiPartyEscrow();
    }

    class ConfigurationDependencyFactory
    DependencyFactory <|.. ConfigurationDependencyFactory

    interface PaymentStrategy {
        <ReqT, RespT> Payment getPayment(GrpcCallParameters<ReqT, RespT> parameters, ServiceClient serviceClient);
    }

    class Sdk {
        Sdk(Configuration config);
        Sdk(DependencyFactory factory);

        ServiceClient newServiceClient(String orgId, String serviceId, String endpointGroupName, PaymentStrategy paymentStrategy);
        Ethereum getEthereum();
        void transfer(Address toAddress, BigInteger amount);
        Identity getIdentity();
        MetadataProvider getMetadataProvider(String orgId, String serviceId);
        BlockchainPaymentChannelManager getBlockchainPaymentChannelManager();
        void shutdown();
    }
    Sdk -- Configuration
    Sdk -- ServiceClient
    Sdk -- DependencyFactory

    interface ServiceClient {
        MetadataProvider getMetadataProvider();
        PaymentChannelStateProvider getPaymentChannelStateProvider();
        FreeCallStateService getFreeCallStateService();
        T getGrpcStub(Function<Channel, T> constructor);
        String getOrgId();
        String getServiceId();
        String getEndpointGroupName();
        void shutdownNow();
    }

    class BaseServiceClient
    ServiceClient <|.. BaseServiceClient
    BaseServiceClient *-- DaemonConnection
    BaseServiceClient *-- MetadataProvider
    BaseServiceClient *-- PaymentChannelStateProvider
    BaseServiceClient *-- PaymentStrategy
    BaseServiceClient *-- FreeCallStateService

}

package paymentstrategy {

    abstract class EscrowPaymentStrategy {
        protected PaymentChannel selectChannel(ServiceClient serviceClient);
    }
    PaymentStrategy ()- EscrowPaymentStrategy
    EscrowPaymentStrategy o-- Identity
    EscrowPaymentStrategy -- EscrowPayment
    EscrowPaymentStrategy -- ServiceClient
    EscrowPaymentStrategy -- Sdk

    class FixedPaymentChannelPaymentStrategy
    EscrowPaymentStrategy <|-- FixedPaymentChannelPaymentStrategy
    
    class OnDemandPaymentChannelPaymentStrategy
    EscrowPaymentStrategy <|-- OnDemandPaymentChannelPaymentStrategy
    OnDemandPaymentChannelPaymentStrategy o-- Ethereum
    OnDemandPaymentChannelPaymentStrategy o-- BlockchainPaymentChannelManager
    
    class FreeCallPaymentStrategy
    PaymentStrategy ()- FreeCallPaymentStrategy
    FreeCallPaymentStrategy o-- Ethereum
    FreeCallPaymentStrategy o-- Identity
    FreeCallPaymentStrategy -- FreeCallPayment
    FreeCallPaymentStrategy -- ServiceClient

    class CombinedPaymentStrategy
    PaymentStrategy ()- CombinedPaymentStrategy
    CombinedPaymentStrategy *-- PaymentStrategy

}

@enduml
