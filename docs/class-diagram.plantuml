@startuml

title SingularityNet Java SDK

package io.singularitynet.sdk.ethereum {

    interface WithAddress {
        Address getAddress();
    }

    interface Signer {
        Signature sign(byte[] message);
    }
    WithAddress <|-- Signer

    class PrivateKeyIdentity {
        Credentials getCredentials();
    }
    Signer <|.. PrivateKeyIdentity

    class MnemonicIdentity
    PrivateKeyIdentity <|-- MnemonicIdentity

}


package io.singularitynet.sdk.registry {

    interface MetadataStorage {
        byte[] get(URI uri);
    }
    class IpfsMetadataStorage
    MetadataStorage <|.. IpfsMetadataStorage

    class RegistryContract {
        Optional<OrganizationRegistration> getOrganizationById(String orgId);
        Optional<ServiceRegistration> getServiceRegistrationById(String orgId, String serviceId);
    }

    interface MetadataProvider {
        ServiceMetadata getServiceMetadata();
        OrganizationMetadata getOrganizationMetadata();
    }
    class RegistryMetadataProvider
    MetadataProvider <|.. RegistryMetadataProvider
    RegistryMetadataProvider *-- RegistryContract
    RegistryMetadataProvider *-- MetadataStorage

}

package io.singularitynet.sdk.daemon {
    
    interface DaemonConnection {
        <T> T getGrpcStub(Function<Channel, T> constructor);
        void setClientCallsInterceptor(ClientInterceptor interceptor);
        String getEndpointGroupName();
        void shutdownNow();
    }

    class FirstEndpointDaemonConnection
    DaemonConnection <|.. FirstEndpointDaemonConnection
    FirstEndpointDaemonConnection o-- MetadataProvider

    class PaymentChannelStateService {
        PaymentChannelStateReply getChannelState(BigInteger channelId);
    }
    PaymentChannelStateService o-- Signer
    PaymentChannelStateService -- DaemonConnection

    interface Payment {
        void toMetadata(Metadata headers);
    }

}

package io.singularitynet.sdk.mpe {
    class MultiPartyEscrowContract {
        Optional<PaymentChannel> getChannelById(BigInteger channelId);
        Address getContractAddress();
        PaymentChannel openChannel(Address signer, Address recipient,\n\tPaymentGroupId groupId, BigInteger value, BigInteger expiration);
        void transfer(Address receiver, BigInteger value);
    }

    interface PaymentChannelProvider {
        PaymentChannel getChannelById(BigInteger channelId);
        PaymentChannel openChannel(Address signer, Address recipient,\n\tPaymentGroupId groupId, BigInteger value, BigInteger lifetimeInBlocks);
    }

    class AskDaemonFirstPaymentChannelProvider
    PaymentChannelProvider <|.. AskDaemonFirstPaymentChannelProvider
    AskDaemonFirstPaymentChannelProvider *-- MultiPartyEscrowContract
    AskDaemonFirstPaymentChannelProvider *-- PaymentChannelStateService

    class EscrowPayment
    Payment ()- EscrowPayment

}

package io.singularitynet.sdk.client {

    interface Configuration {
        URL getEthereumJsonRpcEndpoint();
        URL getIpfsEndpoint();
        Optional<SignerType> getSignerType();
        Optional<String> getSignerMnemonic();
        Optional<byte[]> getSignerPrivateKey();
        Optional<Address> getRegistryAddress();
        Optional<Address> getMultiPartyEscrowAddress();
    }

    class ConfigurationUtils {
        static Configuration fromProperties(Properties props);
        static Configuration fromJson(String json);
    }
    
    ConfigurationUtils -- Configuration

    class StaticConfiguration
    Configuration <|.. StaticConfiguration

    interface DependencyFactory {
        Web3j getWeb3j();
        IPFS getIpfs();
        Signer getSigner();
        Registry getRegistry();
        MultiPartyEscrow getMultiPartyEscrow();
    }

    class ConfigurationDependencyFactory
    DependencyFactory <|.. ConfigurationDependencyFactory

    interface PaymentStrategy {
        <ReqT, RespT> Payment getPayment(GrpcCallParameters<ReqT, RespT> parameters, ServiceClient serviceClient);
    }

    abstract class PaymentChannelPaymentStrategy {
        protected PaymentChannel selectChannel(ServiceClient serviceClient);
    }
    PaymentStrategy <|.. PaymentChannelPaymentStrategy

    class FixedPaymentChannelPaymentStrategy
    PaymentChannelPaymentStrategy <|-- FixedPaymentChannelPaymentStrategy
    
    class OnDemandPaymentChannelPaymentStrategy
    PaymentChannelPaymentStrategy <|-- OnDemandPaymentChannelPaymentStrategy

    class Sdk {
        Sdk(Configuration config);
        Sdk(DependencyFactory factory);

        ServiceClient newServiceClient(String orgId, String serviceId, String endpointGroupName, PaymentStrategy paymentStrategy);
        void shutdown();
    }
    Sdk -- Configuration
    Sdk -- ServiceClient
    Sdk -- DependencyFactory

    interface ServiceClient {
        MetadataProvider getMetadataProvider();
        PaymentChannelProvider getPaymentChannelProvider();
        Signer getSigner();
        T getGrpcStub(Function<Channel, T> constructor);
        DaemonConnection getDaemonConnection();
        void shutdownNow();
    }

    class BaseServiceClient
    ServiceClient <|.. BaseServiceClient
    BaseServiceClient *-- DaemonConnection
    BaseServiceClient *-- MetadataProvider
    BaseServiceClient *-- PaymentChannelProvider
    BaseServiceClient *-- PaymentStrategy
    BaseServiceClient *-- Signer

}

@enduml
